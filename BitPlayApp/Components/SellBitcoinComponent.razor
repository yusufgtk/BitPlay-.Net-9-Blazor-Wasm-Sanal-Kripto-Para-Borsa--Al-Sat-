@inject IAccountService AccountService
@inject IProccessService ProccessService
@inject IJSRuntime JSRuntime

@if (bitcoinModel != null)
{
    <div class="card text-bg-danger mb-3" style="width: 80%; border-radius: 15px;">
        <div class="card-header fw-bold">Sat</div>
        <div class="card-body">
            <h6 class="card-title">Fiyat: <strong>@bitcoinModel.SellPrice</strong> $</h6>
            <EditForm Model="sellBitcoinModel" OnValidSubmit="SellSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="mb-3">
                    <label for="amount" class="form-label">Miktar</label>
                    <InputNumber class="form-control" id="amount" @bind-Value="sellBitcoinModel.BTCAmount" @oninput="OnBTCAmountChanged" />
                    <span>@sellBitcoinModel.BTCAmount</span>
                </div>
                <div class="mb-3">
                    <label for="totalPrice" class="form-label">Tutar</label>
                    <InputNumber class="form-control" id="totalPrice" @bind-Value="sellBitcoinModel.USDAmount" @oninput="OnUSDAmountChanged" />
                </div>
                <div class="mb-3">
                    <label class="form-label">Komisyon: @sellBitcoinModel.Commission $</label>
                </div>
                <button type="submit" class="btn btn-outline-light border border-2 fw-bolder">
                    <span>Sat</span>
                    @if (loading)
                    {
                        <i class="fa-solid fa-spinner fa-spin-pulse ms-2 "></i>
                    }

                </button>
            </EditForm>
        </div>
        @if (btcSellStatus)
        {
            <div class="alert @alertColor d-flex justify-content-center my-2" role="alert">
                <div class="d-flex">
                    <i class="fa-solid fa-circle-check me-2"></i><span>@btcSellMessage</span>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert text-center text-bg-danger">Hata meydana geldi!</div>
}


@code {
    [Parameter]
    public BitcoinModel? bitcoinModel { get; set; }

    private SellBitcoinModel sellBitcoinModel = new();

    private bool btcSellStatus = false;
    private string? btcSellMessage;
    private string? alertColor;
    private bool loading = false;

    private void OnBTCAmountChanged(ChangeEventArgs e)
    {
        if (e.Value is null)
            sellBitcoinModel.BTCAmount = 0.000000m;

        sellBitcoinModel.BTCAmount = Convert.ToDecimal(e.Value);
        sellBitcoinModel.BTCAmount = Math.Round(sellBitcoinModel.BTCAmount, 6);
        if (sellBitcoinModel?.BTCAmount != null && bitcoinModel?.BuyPrice != null)
        {
            sellBitcoinModel.USDAmount = Math.Round(sellBitcoinModel.BTCAmount * bitcoinModel.BuyPrice, 2);
            sellBitcoinModel.Commission = Math.Round(sellBitcoinModel.USDAmount * 0.001m, 2);
        }
    }
    private void OnUSDAmountChanged(ChangeEventArgs e)
    {
        if (e.Value is null)
            sellBitcoinModel.USDAmount = 0.00m;

        sellBitcoinModel.USDAmount = Convert.ToDecimal(e.Value.ToString());
        sellBitcoinModel.Commission = Math.Round(sellBitcoinModel.USDAmount * 0.001m, 2);
        if (sellBitcoinModel?.BTCAmount != null && bitcoinModel?.BuyPrice != null)
        {
            sellBitcoinModel.BTCAmount = Math.Round(sellBitcoinModel.USDAmount / bitcoinModel.BuyPrice, 6);
        }
    }

    private async Task SellSubmit()
    {
        if (sellBitcoinModel.BTCAmount > 0 && sellBitcoinModel.USDAmount > 10)
        {
            loading = true;
            string idToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "idToken");
            string userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
            AccountModel accountModel = await AccountService.GetAccountByUserIdAsync(userId, idToken);
            if (accountModel.BtcBalance >= sellBitcoinModel.BTCAmount)
            {
                accountModel.UsdBalance = accountModel.UsdBalance + (sellBitcoinModel.USDAmount - sellBitcoinModel.Commission);
                accountModel.BtcBalance = accountModel.BtcBalance - sellBitcoinModel.BTCAmount;

                btcSellStatus = await AccountService.UpdateAccountByUserIdAsync(accountModel, userId, idToken);
                if (btcSellStatus)
                {
                    ProccessModel proccessModel = new ProccessModel
                    {
                        Id = Guid.NewGuid().ToString(),
                        ProccessName = "Sell",
                        CryptoName = "BTC",
                        Amount=sellBitcoinModel.BTCAmount,
                        Rate = bitcoinModel.SellPrice,
                        Total = sellBitcoinModel.USDAmount,
                        CreatedTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"),
                        UserId = userId,
                        AfterProccessBalance = accountModel.BtcBalance
                    };
                    bool proccessStatus = await ProccessService.CreateProccess(proccessModel, userId, idToken);
                    if(proccessStatus)
                    {
                        btcSellMessage = "İşlem Başarılı!";
                        alertColor = "alert-success";
                        AccountStateManager.Status = btcSellStatus;
                        sellBitcoinModel.BTCAmount = 0.000000m;
                        sellBitcoinModel.USDAmount = 0.00m;
                    }
                    
                }

            }
            else
            {
                btcSellStatus = true;
                btcSellMessage = "Bakiyeniz yetersiz!";
                alertColor = "alert-danger";
            }
            loading = false;
        }
    }
}